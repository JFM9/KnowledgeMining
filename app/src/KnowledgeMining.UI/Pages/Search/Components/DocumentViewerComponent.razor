@inject ILinkGenerator LinkGenerator;

<div>
    <a href="@DocumentUri" download>Download File</a>
</div>
<hr/>

@switch (documentExtention)
{
    case FileExtensions.PDF:
        @RenderPDFViewer((DocumentUri, contentType))
        ;
        break;
    case FileExtensions.TXT:
    case FileExtensions.JSON:
        @RenderTextViewer((DocumentUri, contentType))
        ;
        break;
    case FileExtensions.MSG:
    case FileExtensions.EML:
        @RenderEmailViewer((DocumentUri, contentType));
        break;
    default:
        @RenderUnknowViewer(documentExtention)
        ;
        break;
}

@code {
    [Parameter]
    public DocumentMetadata Document { get; set; }
    public string? DocumentUri { get; set; }

    private string documentExtention = FileExtensions.UNKNOWN;
    private string contentType = string.Empty;

    protected override void OnParametersSet()
    {
        DocumentUri = LinkGenerator.GenerateDocumentPreviewUrl(Document);
        documentExtention = DocumentUri?.GetFileExtension() ?? string.Empty;
        contentType = FileExtensions.GetContentTypeForFileExtension(documentExtention);
    }

    private RenderFragment<(string?, string)> RenderPDFViewer = ((string? DocumentUri, string ContentType) data) => __builder =>
    {
        <iframe class="file-container" src="@data.DocumentUri" type="@data.ContentType">
            This browser does not support PDFs. Please download the file to view it: <a href="@data.DocumentUri" download>Download PDF</a>"
        </iframe>
    };

    private RenderFragment<(string?, string)> RenderTextViewer = ((string? DocumentUri, string ContentType) data) => __builder =>
    {
        <iframe class="file-container" src="@data.DocumentUri" type="@data.ContentType">
            This browser does not support Text files. Please download the file to view it: <a href="@data.DocumentUri" download>Download File</a>"
        </iframe>
    };

    private RenderFragment<(string?, string)> RenderEmailViewer = ((string? DocumentUri, string ContentType) data) => __builder =>
    {
        <iframe class="file-container" src="@data.DocumentUri" type="@data.ContentType">
            This browser does not support Text files. Please download the file to view it: <a href="@data.DocumentUri" download>Download File</a>"
        </iframe>
    };

    private RenderFragment<string> RenderUnknowViewer = extension => __builder =>
    {
        <MudText>Document Viewer not available for extension '@extension'</MudText>
    };
}
