@using KnowledgeMining.Application.Documents.Queries.GenerateEntityMap
@using KnowledgeMining.Infrastructure.Services.Search
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject IMediator Mediator

<div class="d-flex flex-row">
    <div class="flex-grow-1">
        <svg id="@_entityMapContainerId"></svg>
    </div>
    <div class="d-flex flex-column" style="min-width:400px;">
        <MudSlider Min="1" Max="10" Step="1" @bind-Value="_maxLevels" T="int" ValueLabel="true">Max Levels: @_maxLevels</MudSlider>
        <MudSlider Min="3" Max="10" Step="1" @bind-Value="_maxNodes" T="int" ValueLabel="true">Max Nodes: @_maxNodes</MudSlider>
        <MudSelect  MaxHeight="200" T="string" Placeholder="Select facets" Label="Facets" MultiSelection="true" @bind-SelectedValues="_selectedEntityMapFacets">
            @foreach (var facet in FacetableFields)
            {
                <MudSelectItem T="string" Value="@facet">@facet</MudSelectItem> 
            }
        </MudSelect>
        
        @if(_loading)
        {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />    
        }
        <MudButton Variant="Variant.Filled"  Color="Color.Primary" OnClick="GenerateEntityMap">Apply</MudButton>
        </div>
</div>

@code{
    [Parameter]
    public string? SearchText { get; set; } = default;
    [Parameter]
    public string? IndexName { get; set; } = default;
    [Parameter]
    public IEnumerable<string> FacetableFields { get; set; } = Enumerable.Empty<string>();

    private string _entityMapContainerId = "entity-map";
    private int _maxLevels = 1;
    private int _maxNodes = 3;
    private bool _loading = false;

    private IEnumerable<string> _selectedEntityMapFacets = new HashSet<string>();
    private IJSObjectReference? module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _selectedEntityMapFacets = FacetableFields.Take(1);
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/entityMapV2.js");
            await GenerateEntityMap();
            StateHasChanged();
        }
    }

    private async Task GenerateEntityMap()
    {
        _loading = true;
        var entityMapData = await Mediator.Send(new GenerateEntityMapQuery(IndexName, SearchText, _selectedEntityMapFacets, _maxLevels, _maxNodes));
        await module.InvokeVoidAsync("renderEntityGraph", _entityMapContainerId, entityMapData, _maxLevels);
        _loading = false;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}