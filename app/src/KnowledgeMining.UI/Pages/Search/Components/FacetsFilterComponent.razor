@using KnowledgeMining.Application.Documents.Queries.SearchDocuments
@using KnowledgeMining.UI.Pages.Search.ViewModels

<style>
    .expander-facets .mud-expand-panel-content  {
        max-height: 330px;
        overflow: scroll;
    }

    .checkbox-single-line {
        display: block !important;
    }
</style>

@foreach (var aggregateFacet in Facets?.OrderBy(x => x.Name) ?? Enumerable.Empty<SummarizedFacet>())
{
    var selectedAggregateFacets = aggregateFacet.Values?.Where(x => IsSelected(x)).ToList() 
        ?? new List<Facet>();

    <MudExpansionPanels Class="mb-6">
        <MudExpansionPanel Text="@($"{aggregateFacet.Name?.SplitCamelCase().ToTitleCase()} ({aggregateFacet.Values?.Count()})")" 
            Disabled="@(aggregateFacet.Values?.Any() is false)" Class="@(aggregateFacet.Count > 10 ? "expander-facets" : string.Empty)">

            @foreach (var facet in GetFacets(aggregateFacet))
            {
                <div>
                <MudTooltip Text="@GetFacetValueDescription(facet.Name, facet.Value)" 
                    Arrow="true" Placement="Placement.Right">
                    <MudCheckBox T="bool" 
                        Label="@GetFacetLabel(facet)"
                        Checked="@IsSelected(facet)" 
                        CheckedChanged="@(isSelected => HandleCheckedChanged(facet, isSelected))" />
                </MudTooltip>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
}

@code {
    private IDictionary<Facet, bool> _selectedFacets = new Dictionary<Facet, bool>();

    [Parameter]
    public IEnumerable<SummarizedFacet>? Facets { get; set; }

    [Parameter]
    public EventCallback<FacetSelectedViewModel> OnFacetSelectedChanged { get; set; }

    [Parameter]
    public IndexItem? IndexItem { get; set; }

    public void ClearFacets()
    {
        _selectedFacets = new Dictionary<Facet, bool>();
    }

    private IEnumerable<Facet> GetFacets(SummarizedFacet aggregateFacet)
    {
        if(aggregateFacet.Values == null)
            return Enumerable.Empty<Facet>();

        return aggregateFacet.Values
            .OrderBy(x => !IsSelected(x))
            .ThenByDescending(x => x.Count)
            .ThenBy(x => x.Value)
            .ToList();
    }

    private bool IsSelected(Facet facet)
    {
        if(_selectedFacets.TryGetValue(facet, out bool isSelected))
        {
            return isSelected;
        }

        return false;
    }


    private Task HandleCheckedChanged(Facet facet, bool isSelected)
    {
        if (_selectedFacets.ContainsKey(facet))
        {
            _selectedFacets[facet] = isSelected;
        }
        else
        {
            _selectedFacets.Add(facet, isSelected);
        }

        return OnFacetSelectedChanged.InvokeAsync(new (facet, isSelected));
    }

    private string GetFacetLabel(Facet facet)
    {
        if (facet == null)
            return string.Empty;


        if (facet.Count > 0)
            return $"{facet.Value} ({facet.Count})";

        return facet.Value!;
    }

    private string GetFacetDescription(string? name)
    {
        if(!string.IsNullOrEmpty(name) && IndexItem != null)
        {
            var facet = IndexItem.Facets.Where(x => x.Id.Equals(name, StringComparison.CurrentCulture)).FirstOrDefault();
            return facet?.Description ?? string.Empty;
        }
        return string.Empty;
    }

    private string GetFacetValueDescription(string? facetName, string? name)
    {
        if(!string.IsNullOrEmpty(facetName) && !string.IsNullOrEmpty(name) && IndexItem != null)
        {
            var facet = IndexItem.Facets.Where(x => x.Id.Equals(facetName, StringComparison.CurrentCulture)).FirstOrDefault();
            if(facet != null && facet.Values != null)
            {
                var facetValue = facet.Values
                    .Where(x => x.Id != null && x.Id.Equals(name, StringComparison.CurrentCultureIgnoreCase))
                    .FirstOrDefault();

                return facetValue?.Description ?? string.Empty;
            }
        }
        return string.Empty;
    }
}