@using KnowledgeMining.Application.Documents.Queries.SearchDocuments

<style>
    .expander-facets .mud-expand-panel-content  {
        max-height: 330px;
        overflow: scroll;
    }

    .checkbox-single-line {
        display: block !important;
    }
</style>

@foreach (var aggregateFacet in Facets?.OrderBy(x => x.Name) ?? Enumerable.Empty<SummarizedFacet>())
{
    var selectedAggregateFacets = aggregateFacet.Values?.Where(x => IsSelected(x)).ToList() 
        ?? new List<Facet>();

    <MudExpansionPanels Class="mb-6">
        <MudExpansionPanel Text="@($"{aggregateFacet.Name?.SplitCamelCase().ToTitleCase()} ({aggregateFacet.Values?.Count()})")" 
            Disabled="@(aggregateFacet.Values?.Any() is false)" Class="@(aggregateFacet.Count > 10 ? "expander-facets" : string.Empty)">
            @if (selectedAggregateFacets.Count > 0) 
            {
                @foreach (var facet in selectedAggregateFacets)
                {
                    <MudCheckBox Class="checkbox-single-line" T="bool" Label="@GetFacetLabel(facet)" 
                        Checked="true" 
                        CheckedChanged="@(isSelected => HandleCheckedChanged(facet, isSelected))"></MudCheckBox>
                }
                
                @if(aggregateFacet.Count - selectedAggregateFacets.Count > 0)
                {
                    <MudDivider Light="true" />
                }
            }
            @if (aggregateFacet.Values != null)
            {
                @foreach (var facet in aggregateFacet.Values.Except(selectedAggregateFacets))
                {
                    <MudCheckBox Class="checkbox-single-line" T="bool" Label="@GetFacetLabel(facet)" 
                        Checked="false" 
                        CheckedChanged="@(isSelected => HandleCheckedChanged(facet, isSelected))"></MudCheckBox>
                }
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
}

@code {
    private IDictionary<Facet, bool> _selectedFacets = new Dictionary<Facet, bool>();

    [Parameter]
    public IEnumerable<SummarizedFacet>? Facets { get; set; }

    [Parameter]
    public EventCallback<Facet> OnFacetSelectedChanged { get; set; }

    public void ClearFacets()
    {
        _selectedFacets = new Dictionary<Facet, bool>();
    }

    private bool IsSelected(Facet facet)
    {
        if(_selectedFacets.TryGetValue(facet, out bool isSelected))
        {
            return isSelected;
        }

        return false;
    }


    private Task HandleCheckedChanged(Facet facet, bool isSelected)
    {
        if (_selectedFacets.ContainsKey(facet))
        {
            _selectedFacets[facet] = isSelected;
        }
        else
        {
            _selectedFacets.Add(facet, isSelected);
        }

        return OnFacetSelectedChanged.InvokeAsync(facet);
    }

    private string GetFacetLabel(Facet facet)
    {
        if (facet == null)
            return string.Empty;


        if (facet.Count > 0)
            return $"{facet.Value} ({facet.Count})";

        return facet.Value!;
    }
}