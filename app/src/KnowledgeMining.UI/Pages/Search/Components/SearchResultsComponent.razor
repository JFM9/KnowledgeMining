@using KnowledgeMining.Application.Documents.Queries.SearchDocuments
@using System.Text.RegularExpressions
@using KnowledgeMining.UI.Services.State
@using KnowledgeMining.UI.Wrappers
@using System.Text

@inject NavigationManager NavManager
@inject StateService StateService

@if (IsLoading)
{
    <MudGrid>
        <MudItem xs="12" sm="5">
            <MudCard Outlined="true">
                <MudCardContent Class="d-flex flex-column align-content-start">
                    <div class="d-flex flex-row flex-fill gap-2">
                        <div>
                            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
                        </div>
                        <div class="d-flex flex-column">
                            <div>
                                <MudSkeleton Width="100px" Animation="Animation.Wave" />
                            </div>
                            <div class="d-flex flex-row flex-wrap pt-1 flex-shrink-0">
                                @foreach (var keyPhrase in Enumerable.Range(1, 4))
                                {
                                    <MudSkeleton Width="150px" Style="pa-5" Animation="Animation.Wave" SkeletonType="SkeletonType.Text" />
                                }
                            </div>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}
else
{
    @if (TotalCount > 0)
    {
        <MudGrid>
            @foreach (var document in DocumentWrapper.Documents())
            {
                <MudItem xs="12" sm="12">
                    <a href="@($"{NavigateTo}{document.Id}")">
                        <MudCard Outlined="true"
                            Style="cursor: pointer;">
                            <MudCardHeader>
                                <CardHeaderAvatar>
                                    @if(string.IsNullOrWhiteSpace(document.IconUrl)) 
                                    {
                                        <MudAvatar Color="Color.Dark"><MudIcon Icon="@Icons.Custom.FileFormats.FileDocument"></MudIcon></MudAvatar>
                                    } 
                                    else
                                    {
                                        <img src="@document.IconUrl" class="document-icon" />
                                    }
                                </CardHeaderAvatar>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">@DocumentHeader(document)</MudText>
                                    <MudText Typo="Typo.body2">@DocumentSubHeader(document)</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <div class="d-flex flex-row gap-10">
                                    <div class="flex-grow-1" style="min-width: 50%; max-width:50%">
                                        @*<MudHighlighter Class="mud-dark-text"
                                             Style="background-color:transparent;font-weight:bold"
                                             Text="@DocumentSummary(document)"
                                             HighlightedTexts="@SearchTokenizer.Tokens" />
                                        <MudText Typo="Typo.body2"></MudText>*@
                                        @((MarkupString)DocumentPreviewText(document))
                                    </div>

                                    <div class="flex-grow-1">
                                        @foreach (var keyPhrase in DocumentWrapper.GetCloudWords(document).Take(8) ?? Enumerable.Empty<string>())
                                        {
                                            <MudChip Color="Color.Info"><MudText Typo="Typo.body2">@keyPhrase</MudText></MudChip>
                                        }
                                    </div>
                                </div>
                            </MudCardContent>
                            @if(DocumentFooterValues(document) != null) 
                            {
                                var footerValues = DocumentFooterValues(document);
                                <MudCardActions>
                                    @for(var x = 0; x<footerValues.Length; x++) 
                                    {
                                        var index = x; //Needed due to razor for loops issue
                                        <MudText Typo="Typo.caption" Style="color:gray">@footerValues[index]</MudText>
                                        @if(x+1 < footerValues.Length)
                                        {
                                            <span>&nbsp;·&nbsp;</span>
                                        }
                                    }
                                </MudCardActions> 
                            }
                        </MudCard>
                    </a>
                </MudItem>
            }
        </MudGrid>
        <div class="d-flex align-center flex-column pt-4">
            <MudPagination Color="Color.Primary" Count="@(TotalPages ?? 0)" SelectedChanged="@HandlePageSelected" Selected="@(GetSelectedPage())" />            
        </div>
    }
    else
    {
        <MudContainer Fixed="true" Class="d-flex align-center flex-column">
            <MudText>No documents found</MudText>
        </MudContainer>
    }
}

@code {
    [Parameter]
    public DocumentMetadataWrapper DocumentWrapper { get; set; }
    [Parameter]
    public string[]? DocumentFooterFields { get; set; }
    [Parameter]
    public long? TotalCount { get; set; }
    [Parameter]
    public int? TotalPages { get; set; }
    [Parameter]
    public string NavigateTo { get; set; }

    [Parameter]
    public int? PageSelected { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSelectedChanged { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<FacetFilter?> SearchCallback { get; set; }

    private const int SummaryLength = 503;
    private const string Suffix = "...";
    private const string NoSummary = "No summary available.";

    private int GetSelectedPage()
    {
        if(PageSelected.HasValue && PageSelected.Value > 0)
        {
            return PageSelected.Value;
        }
        return 1;
    }

    private void OnSearchItemClicked(string documentId)
    {
        NavManager.NavigateTo($"{NavigateTo}{documentId}");
    }

    private Task HandlePageSelected(int page)
    {
        if(GetSelectedPage() != page)
        {
            return OnPageSelectedChanged.InvokeAsync(page);
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    private string DocumentHeader(DocumentMetadata document)
    {
        return DocumentWrapper.GetTitle(document)!;
    }

    private string DocumentSubHeader(DocumentMetadata document)
    {
        return document.DateTime?.ToLongDateString() ?? string.Empty;
    }

    private string DocumentPreviewText(DocumentMetadata document)
    {
        var previewText = DocumentHighlightedText(document);
        if (previewText != null)
            return previewText;
        return DocumentSummary(document);
    }

    private string? DocumentHighlightedText(DocumentMetadata document)
    {
        // only handle content field highlights

        if(document.Highlights != null && document.Highlights.ContainsKey("content"))
        {
            var contentHighlights = document.Highlights["content"];
            if(contentHighlights.Count > 0)
            {
                return string.Join("<br/>...<br/>", contentHighlights.Take(3));
            }
        }
        return null;
    }

    private string DocumentSummary(DocumentMetadata document)
    {
        //if(!string.IsNullOrEmpty(document.Content) && SearchTokenizer.HasTokens) {
        //    var searchTextRelevance = new SearchTextRelevance(SearchTokenizer, document.Content);
        //    var relevantSection = searchTextRelevance.MostRelevantSection(SummaryLength);
        //    if (relevantSection != null)
        //        return relevantSection;
        //}
        var summary = document.Summary ?? string.Empty;

        if (string.IsNullOrWhiteSpace(summary))
            summary = document.Content ?? string.Empty;

        if (string.IsNullOrEmpty(summary))
            return NoSummary;

        if (summary.Length > SummaryLength)
            summary = summary.Substring(0, SummaryLength-Suffix.Length) + Suffix;

        return CleanString(summary);
    }

    private string CleanString(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;

        text = text.ReplaceLineEndings();
        text = Regex.Replace(text, "\\t|\\r|\\n", string.Empty);
        return text;
    }

    private string[]? DocumentFooterValues(DocumentMetadata document)
    {
        if (DocumentFooterFields == null || DocumentFooterFields.Length == 0)
        {
            return null;   
        }

        var values = new List<string>();
        foreach(var footerField in DocumentFooterFields)
        {
            var fieldValue = document.GetValue(footerField, seperator: " · ");

            if(!string.IsNullOrWhiteSpace(fieldValue))
            {
                values.Add(fieldValue);
            }
        }

        return values.ToArray();

    }

    
}