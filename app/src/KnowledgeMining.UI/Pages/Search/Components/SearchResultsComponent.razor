@using KnowledgeMining.Application.Documents.Queries.SearchDocuments
@using System.Text.RegularExpressions
@using KnowledgeMining.UI.Wrappers
@if (IsLoading)
{
    <MudGrid>
        <MudItem xs="12" sm="5">
            <MudCard Outlined="true">
                <MudCardContent Class="d-flex flex-column align-content-start">
                    <div class="d-flex flex-row flex-fill gap-2">
                        <div>
                            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
                        </div>
                        <div class="d-flex flex-column">
                            <div>
                                <MudSkeleton Width="100px" Animation="Animation.Wave" />
                            </div>
                            <div class="d-flex flex-row flex-wrap pt-1 flex-shrink-0">
                                @foreach (var keyPhrase in Enumerable.Range(1, 4))
                                {
                                    <MudSkeleton Width="150px" Style="pa-5" Animation="Animation.Wave" SkeletonType="SkeletonType.Text" />
                                }
                            </div>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}
else
{
    @if (TotalCount > 0)
    {
        <MudGrid>
            @foreach (var document in DocumentWrapper.Documents())
            {
                <MudItem xs="12" sm="12">
                    <MudCard Outlined="true" @onclick="() => OnDocumentClicked.InvokeAsync(document.Id)" Style="cursor: pointer;">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Dark"><MudIcon Icon="@Icons.Custom.FileFormats.FileDocument"></MudIcon></MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">@DocumentHeader(document)</MudText>
                                <MudText Typo="Typo.body2">@DocumentSubHeader(document)</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudMenu Icon="@Icons.Material.Outlined.Info">
                                    <MudMenuItem Class="cursor-help">Score: @document.SearchScore</MudMenuItem>
                                    @if(!string.IsNullOrEmpty(document.Name))
                                    {
                                        <MudMenuItem Class="cursor-help">File: @document.Name</MudMenuItem>
                                    }
                                    @if(!string.IsNullOrEmpty(document.Category)) 
                                    {
                                        <MudMenuItem Class="cursor-help">Type: @document.Category</MudMenuItem>
                                    }
                                    </MudMenu>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <div class="d-flex flex-row gap-10">
                                <div class="flex-grow-1" style="min-width: 50%; max-width:50%">
                                    <MudText Typo="Typo.body2">@DocumentSummary(document)</MudText>
                                </div>

                                <div class="flex-grow-1">
                                    @foreach (var keyPhrase in DocumentWrapper.GetCloudWords(document).Take(8) ?? Enumerable.Empty<string>())
                                    {
                                        <MudChip Color="Color.Info"><MudText Typo="Typo.body2">@keyPhrase</MudText></MudChip>
                                    }
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        <div class="d-flex align-center flex-column pt-4">
            <MudPagination Color="Color.Primary" Count="@(TotalPages ?? 0)" SelectedChanged="@HandlePageSelected" Selected="@(GetSelectedPage())" />            
        </div>
    }
    else
    {
        <MudContainer Fixed="true" Class="d-flex align-center flex-column">
            <MudText>No documents found</MudText>
        </MudContainer>
    }
}

@code {
    [Parameter]
    public DocumentMetadataWrapper DocumentWrapper { get; set; }
    [Parameter]
    public long? TotalCount { get; set; }
    [Parameter]
    public int? TotalPages { get; set; }

    [Parameter]
    public EventCallback<string> OnDocumentClicked { get; set; }

    [Parameter]
    public int? PageSelected { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSelectedChanged { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public EventCallback<FacetFilter?> SearchCallback { get; set; }

    private const int SummaryLength = 503;
    private const string Suffix = "...";
    private const string NoSummary = "No summary available.";

    private int GetSelectedPage()
    {
        if(PageSelected.HasValue && PageSelected.Value > 0)
        {
            return PageSelected.Value;
        }
        return 1;
    }

    private Task HandlePageSelected(int page)
    {
        if(GetSelectedPage() != page)
        {
            return OnPageSelectedChanged.InvokeAsync(page);
        }
        else
        {
            return Task.CompletedTask;
        }
    }

    private string DocumentHeader(DocumentMetadata document)
    {
        return DocumentWrapper.GetTitle(document)!;
    }

    private string DocumentSubHeader(DocumentMetadata document)
    {
        return document.DateTime?.ToLongDateString() ?? string.Empty;
    }

    private string DocumentSummary(DocumentMetadata document)
    {
        var summary = document.Summary ?? string.Empty;

        if (string.IsNullOrWhiteSpace(summary))
            summary = document.Content ?? string.Empty;

        if (string.IsNullOrEmpty(summary))
            return NoSummary;

        if (summary.Length > SummaryLength)
            summary = summary.Substring(0, SummaryLength-Suffix.Length) + Suffix;

        return CleanString(summary);
    }

    private string CleanString(string text)
    {
        if (string.IsNullOrEmpty(text))
            return text;

        text = text.ReplaceLineEndings();
        text = Regex.Replace(text, "\\t|\\r|\\n", string.Empty);
        return text;
    }

    private string DocumentFooter(DocumentMetadata document)
    {
        if (!string.IsNullOrWhiteSpace(document.Name))
            return document.Name;

        return string.Empty;
    }

    
}