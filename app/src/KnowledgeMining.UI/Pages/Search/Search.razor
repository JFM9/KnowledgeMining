@page "/search"

@using KnowledgeMining.Application.Documents.Queries.SearchDocuments
@using KnowledgeMining.Application.Documents.Queries.GenerateEntityMap
@using KnowledgeMining.Application.Documents.Queries.GetAutocompleteSuggestions
@using KnowledgeMining.Application.Documents.Queries.GetDocumentMetadata
@using KnowledgeMining.Domain.Entities
@using KnowledgeMining.Infrastructure.Services.Storage
@using KnowledgeMining.UI.Pages.Search.ViewModels
@using KnowledgeMining.UI.Services.Metadata

@inject IMediator Mediator
@inject MetadataService MetadataService

<style>
    .hide-input > .mud-input-control {
        display: none;
    }
</style>

<PageTitle>Search</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12" md="12">
            <MudTextField   @bind-Value="SearchText" 
                            Label="Search" 
                            Clearable="true"
                            Immediate="true"
                            Adornment="Adornment.End" 
                            AdornmentIcon="@Icons.Filled.Search"
                            AdornmentColor="Color.Primary"
                            OnClearButtonClick="@SearchIfClearClicked"
                            OnKeyUp="@SearchIfEnterPressed"
                            OnAdornmentClick="@(() => SearchDocuments(new SearchDocumentsQuery(SearchText, _selectedPage, poligonString, _selectedFacets)))" 
                            Variant="Variant.Outlined" 
                            Margin="Margin.None"
                            />
        </MudItem>
        <MudItem xs="12" md="12">
            <MudToolBar Style="height: 20px">
                <MudText><MudIcon Icon="@Icons.Filled.CalendarMonth" Color="Color.Primary" Title="Time Span"></MudIcon> Time Span:</MudText>
                <MudMenu EndIcon="@Icons.Filled.ArrowDropDown" Label="@_timespanLabel">
                    <MudMenuItem OnClick="@TimeSpanAnyOnClick">Any</MudMenuItem>
                    <MudMenuItem OnClick="@TimeSpanTodayOnClick">Today</MudMenuItem>
                    <MudMenuItem OnClick="@TimeSpanThisWeekOnClick">This Week</MudMenuItem>
                    <MudMenuItem OnClick="@TimeSpanThisMonthOnClick">This Month</MudMenuItem>
                    <MudMenuItem OnClick="@TimeSpanCustomOnClick">Custom</MudMenuItem>
                </MudMenu>
                <MudText Class="pl-6"><MudIcon Icon="@Icons.Filled.Sort" Color="Color.Primary" Title="Sort By"></MudIcon> Sort By:</MudText>
                <MudMenu EndIcon="@Icons.Filled.ArrowDropDown" Label="@_sortLabel" Disabled="@(_searchState?.TotalCount == 0)">
                    <MudMenuItem OnClick="@SortBestMatchClicked">Best Match</MudMenuItem>
                    <MudMenuItem OnClick="@SortDateClicked">Date</MudMenuItem>
                </MudMenu>

                <MudSpacer />
                <MudButton Disabled="@DisableClearFilter()"
                    StartIcon="@Icons.Filled.Clear"
                    Color="Color.Error"
                    OnClick="ClearSearch">Clear Filters</MudButton>
            </MudToolBar>
        </MudItem>
        <MudItem xs="12">
        <MudDivider Light="true" />
        </MudItem>
        <MudItem xs="12" md="2">    
                <FacetsFilterComponent 
                    @ref="_facetsFilterComponent"
                    Facets="@_searchState.Facets"
                    StaticFacets="@_searchState.StaticFacets"
                    OnFacetSelectedChanged="UpdateSearchFacetsAndSearch"></FacetsFilterComponent>
        </MudItem>
        <MudItem xs="12" md="10">
            <MudTabs @ref="_mainBodyTabs" Elevation="0" Outlined="true" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="mt-1">
                <div class="d-flex flex-column">
                    <MudTabPanel @ref="_searchResultsPanel" Text="@_searchResultsLabel">
                        <SearchResultsComponent @ref="_searchResultsComponent"
                            Documents="@_searchState.Documents" 
                            IsLoading="@_isSearching" TotalCount="@_searchState.TotalCount" TotalPages="@_searchState.TotalPages" 
                            OnDocumentClicked="@GetDocumentDetails" OnPageSelectedChanged="@SearchPageSelected" 
                            PageSelected="@_selectedPage"></SearchResultsComponent>
                    </MudTabPanel>
                    <MudTabPanel Text="Entity Map">
                        <EntityMapComponent FacetableFields="@_searchState.FacetableFields" SearchText="@SearchText" />
                    </MudTabPanel>
                </div>
            </MudTabs>
        </MudItem>
    </MudGrid>
    <DocumentDetailsComponent @bind-IsVisible="ShowDocumentDetails" 
        Document="_documentMetadata"></DocumentDetailsComponent>
    <MudDateRangePicker @ref="_timespanPicker" class="hide-input"
                    PickerVariant="PickerVariant.Dialog" 
                    Label="Time span" 
                    DateRangeChanged="@TimeSpanCustomRangeChanged" />
</MudContainer>

@code {
    [Parameter, SupplyParameterFromQuery(Name = "q")] public string? SearchText { get; set; }
    private MudDateRangePicker? _timespanPicker;
    private FacetsFilterComponent? _facetsFilterComponent;
    private SearchResultsComponent? _searchResultsComponent;

    private SearchState _searchState = new();

    private int _selectedPage;
    private List<FacetFilter> _selectedFacets = new();
    private string poligonString = string.Empty;
    private enum TimeSpanType {
        Any,
        Today,
        Week,
        Month,
        Custom
    };

    private string[] excludeFacets = new string[] { BlobMetadata.Mission, BlobMetadata.DocumentType };
    private TimeSpanType _timeSpanSelectedType = TimeSpanType.Any;
    private string _timespanLabel = "Any";
    private string _searchResultsLabel = "Search Results";
    private bool _isSearching = true;
    private bool _showDocumentDetails = false;
    private bool ShowDocumentDetails
    {
        get { return _showDocumentDetails; }
        set
        {
            _showDocumentDetails = value;
        }
    }
    private DocumentMetadata? _documentMetadata;
    private const string LABEL_ORDERBY_BEST_MATCH = "Best Match";
    private const string LABEL_ORDERBY_DATE = "Date";
    private string _sortLabel = LABEL_ORDERBY_BEST_MATCH;

    private MudTabs? _mainBodyTabs;
    private MudTabPanel? _searchResultsPanel;


    protected override async Task OnInitializedAsync()
    {
        var request = new SearchDocumentsQuery(SearchText, _selectedPage, poligonString, _selectedFacets);
        await SearchDocuments(request);
    }

    private async Task SearchIfEnterPressed(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            var request = new SearchDocumentsQuery(SearchText, _selectedPage, poligonString, _selectedFacets);
            await SearchDocuments(request);
        }
    }

    private async Task SearchIfClearClicked(MouseEventArgs e)
    {
        var request = new SearchDocumentsQuery(SearchText, _selectedPage, poligonString, _selectedFacets);
        await SearchDocuments(request);
    }

    private FacetFilter GenerateFacetFilter(Facet facet)
    {
        var facetFilter = new FacetFilter()
            {
                Name = facet.Name
            };

        switch(facet.Name)
        {
            case BlobMetadata.Mission:
                facetFilter.OverrideType = typeof(string[]);
                break;
        }

        return facetFilter;
    }

    private async Task UpdateSearchFacetsAndSearch(Facet facet)
    {
        FacetFilter searchFacet;

        if (!_selectedFacets.Any(f => f.Name == facet.Name))
        {
            searchFacet = GenerateFacetFilter(facet);
            _selectedFacets.Add(searchFacet);
        }
        else
        {
            searchFacet = _selectedFacets.First(f => f.Name == facet.Name);
        }

        if (searchFacet.Values.Any(fv => fv == facet.Value))
        {
            searchFacet.Values.Remove(facet.Value);

            if (!searchFacet.Values.Any())
            {
                _selectedFacets.Remove(searchFacet);
            }
        }
        else
        {
            searchFacet.Values.Add(facet.Value);
        }

        var request = new SearchDocumentsQuery(SearchText, _selectedPage, poligonString, _selectedFacets);

        await SearchDocuments(request);
    }

    private async Task SearchPageSelected(int page)
    {
        _selectedPage = page;
        var request = new SearchDocumentsQuery(SearchText, _selectedPage, poligonString, _selectedFacets);
        await SearchDocuments(request);
    }

    private async Task<IEnumerable<SummarizedFacet>> SearchDocumentsStaticFacets(SearchDocumentsQuery request, SearchDocumentsResponse response)
    {
        var staticFacets = new List<SummarizedFacet>();

        staticFacets.Add(await SearchDocumentsMissionFacets(request));
        staticFacets.Add(await SearchDocumentsDocumentTypeFacet(response));

        return staticFacets;
    }

    private async Task<SummarizedFacet> SearchDocumentsMissionFacets(SearchDocumentsQuery request) 
    {
        var facetFilters = request.FacetFilters.Where(x => !x.Name?.Equals(BlobMetadata.Mission) ?? false);

        //Override String -> StringCollection facets
        var topResponse = await Mediator.Send(new SearchDocumentsQuery(
            request.SearchText,
            request.Page,
            request.PolygonString,
            facetFilters
        ));

        var missionFacet = topResponse.Facets.Where(x => x.Name?.Equals(BlobMetadata.Mission) ?? false).FirstOrDefault()        
            ?? new SummarizedFacet();

        return missionFacet;
    }

    private async Task<SummarizedFacet> SearchDocumentsDocumentTypeFacet(SearchDocumentsResponse response)
    {
        var documentTypes = await MetadataService.DocumentTypes();
        var dtSummarizedFacets = new SummarizedFacet();
        var dtFacets = response.Facets.Where(x => x.Name?.Equals(BlobMetadata.DocumentType) ?? false).FirstOrDefault();

        dtSummarizedFacets.Name = BlobMetadata.DocumentType;
        dtSummarizedFacets.Count = dtFacets?.Count ?? 0;

        var facetValues = documentTypes.Select(x => new Facet
            {
                Count = dtFacets?.Values?.FirstOrDefault(y => y.Value?.Equals(x) ?? false)?.Count ?? 0,
                Name = BlobMetadata.DocumentType,
                Value = x
            });

        dtSummarizedFacets.Values = facetValues.OrderByDescending(x => x.Count);

        return dtSummarizedFacets;
    }

    private async Task SearchDocuments(SearchDocumentsQuery request)
    {
        SwitchToSearchResultsTab();

        _isSearching = true;

        UpdateSearchResultsLabelWithDocumentCount(default);

        var response = await Mediator.Send(request);

        _searchState.Documents = response.Documents;
        _searchState.FacetableFields = response.FacetableFields;
        _searchState.TotalCount = response.TotalCount;
        _searchState.TotalPages = (int)response.TotalPages;        
        _searchState.Facets = response.Facets.Where(x => !excludeFacets.Contains(x.Name));
        _searchState.StaticFacets = await SearchDocumentsStaticFacets(request, response);

        UpdateSearchResultsLabelWithDocumentCount(_searchState.TotalCount);

        _isSearching = false;
    }

    private void SwitchToSearchResultsTab()
    {
        if(_mainBodyTabs?.ActivePanel != _searchResultsPanel && _searchResultsPanel is not null)
        {
            _mainBodyTabs?.ActivatePanel(_searchResultsPanel);
        }
    }

    private void UpdateSearchResultsLabelWithDocumentCount(long? documentsCount)
    {
        if(documentsCount is null || documentsCount <= 0)
        {
            _searchResultsLabel = "Search Results";
        }
        else
        {
            _searchResultsLabel = $"Search Results ({documentsCount})";
        }
    }

    private async Task GetDocumentDetails(string documentId)
    {
        _showDocumentDetails = false;

        _documentMetadata = await Mediator.Send(new GetDocumentMetadataQuery(documentId));

        _showDocumentDetails = true;
    }  

    private async Task TimeSpanAnyOnClick(MouseEventArgs mouseEventArgs)
    {
        _timeSpanSelectedType = TimeSpanType.Any;
        UpdateTimeSpanMenu();
        await UpdateDateTimeFacet("datetime", null, null); 
    }

    private async Task TimeSpanTodayOnClick(MouseEventArgs mouseEventArgs)
    {
        _timeSpanSelectedType = TimeSpanType.Today;
        UpdateTimeSpanMenu();
        await UpdateDateTimeFacet("datetime", DateTime.Now);
    }

    private DateTime GetMondayOfCurrentWeek()
    {
        var today = DateTime.Today;
        var daysToSubtract = (7 + (int)today.DayOfWeek - (int)DayOfWeek.Monday) % 7;

        return today
            .AddDays(-daysToSubtract)
            .Date;
    }

    private async Task TimeSpanThisWeekOnClick(MouseEventArgs mouseEventArgs)
    {
        _timeSpanSelectedType = TimeSpanType.Week;        
        UpdateTimeSpanMenu();
        await UpdateDateTimeFacet("datetime", GetMondayOfCurrentWeek(), DateTime.Today); 
    }

    private DateTime GetFirstOfCurrentMonth()
    {
        var today = DateTime.Today;
        return new DateTime(today.Year, today.Month, 1);
    }

    private async Task TimeSpanThisMonthOnClick(MouseEventArgs mouseEventArgs)
    {
        _timeSpanSelectedType = TimeSpanType.Month;
        UpdateTimeSpanMenu();
        await UpdateDateTimeFacet("datetime", GetFirstOfCurrentMonth(), DateTime.Today);
    }

    private async Task TimeSpanCustomOnClick(MouseEventArgs mouseEventArgs)
    {
        _timeSpanSelectedType = TimeSpanType.Custom;
        if(_timespanPicker != null)
            _timespanPicker.Open();
    }

    private string DateTimeStandardFormat(DateTime d)
    {
        return d.ToString("yyyy-MM-dd");
    }

    private void UpdateTimeSpanMenu()
    {
        switch(_timeSpanSelectedType)
        {
            case TimeSpanType.Today:
                _timespanLabel = $"{DateTimeStandardFormat(DateTime.Today)}";
                break;
            case TimeSpanType.Week:
                _timespanLabel = $"{DateTimeStandardFormat(GetMondayOfCurrentWeek())} - {DateTimeStandardFormat(DateTime.Today)}";
                break;
            case TimeSpanType.Month:
                _timespanLabel = $"{DateTime.Today.ToString("MMMM yyyy")}";
                break;
            case TimeSpanType.Custom:
                var start = _timespanPicker?.DateRange.Start?.ToString("yyyy-MM-dd");
                var end = _timespanPicker?.DateRange.End?.ToString("yyyy-MM-dd");
                _timespanLabel = $"{start} - {end}";
                break;
            default:
                _timespanLabel = "Any";
                break;
        }
    }

    private async Task TimeSpanCustomRangeChanged(DateRange dateRange)
    {
        UpdateTimeSpanMenu();
        await UpdateDateTimeFacet("datetime", dateRange.Start, dateRange.End);
    }

    private string GetDateTimeSearchFormated(DateTime? dateTime)
    {
        if (dateTime is null)
            return string.Empty;

        return $"{dateTime?.ToString("yyyy-MM-dd")}T00:00:00Z";
    }

    private string? GetDateTimeSearchQuery(string fieldName, DateTime? a, DateTime? b = null)
    {
        var startDate = GetDateTimeSearchFormated(a);
        var endDate = GetDateTimeSearchFormated(b);

        if(a != null && b != null)
        {
            return $"le {endDate} and datetime ge {startDate}";
        } 
        else if(a != null)
        {
            return $"ge {startDate}";
        }
        else if(b != null)
        {
            return $"le {endDate}";
        }

        return null;
    }

    private async Task UpdateDateTimeFacet(string fieldName, DateTime? a, DateTime? b = null)
    {        
        FacetFilter? searchFacet = _selectedFacets.FirstOrDefault(x => x.Name != null && x.Name.Equals("datetime"));
        if(searchFacet == null)
        {
            searchFacet = new FacetFilter { Name = "datetime" };
            _selectedFacets.Add(searchFacet);
        }

        var searchQuery = GetDateTimeSearchQuery(fieldName, a, b);

        if(string.IsNullOrEmpty(searchQuery))
        {
            _selectedFacets.Remove(searchFacet);
        }
        else 
        {
            searchFacet.Values = new string[]
            {
                    searchQuery
            };
        }

        var request = new SearchDocumentsQuery(SearchText, _selectedPage, poligonString, _selectedFacets);

        await SearchDocuments(request);
    }

    private async Task ClearSearch(MouseEventArgs args)
    {
        _selectedPage = 0;
        poligonString = string.Empty;
        _selectedFacets.Clear();
        _timeSpanSelectedType = TimeSpanType.Any;
        _facetsFilterComponent?.ClearFacets();
        _sortLabel = LABEL_ORDERBY_BEST_MATCH;

        UpdateTimeSpanMenu();
        await SearchDocuments(new SearchDocumentsQuery(SearchText, _selectedPage, poligonString, _selectedFacets));
    }

    private async Task OrderByCallback(FacetFilter? facet)
    {
        if(facet != null) {
            _selectedFacets.RemoveAll(x => x.Name.Equals(facet.Name));
            _selectedFacets.Add(facet);
            await SearchDocuments(new SearchDocumentsQuery(SearchText, _selectedPage, poligonString, _selectedFacets));
        }
    }

    private bool DisableClearFilter()
    {
        return (_selectedFacets != null && _selectedFacets.Count == 0);
    }

    private async Task SortBestMatchClicked(MouseEventArgs args)
    {
        _sortLabel = LABEL_ORDERBY_BEST_MATCH;
        await OrderByCallback(OrderByFacetFilter.BestMatch());
    }

    private async Task SortDateClicked(MouseEventArgs args)
    {
        _sortLabel = LABEL_ORDERBY_DATE;
        await OrderByCallback(OrderByFacetFilter.Date());
    }
}
