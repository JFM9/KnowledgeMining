@using KnowledgeMining.UI.Services.State

<MudPaper Elevation="0" Class="p-4">
    <MudTable Items="@Items" Hover="true" Breakpoint="Breakpoint.Sm"
        Style="width:600px; max-height: 300px; margin-left: auto; margin-right: auto;"
        Loading="@_isLoading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Document Cart (@(_items?.Count ?? 0))</MudText>
            <MudSpacer />
            <MudButton OnClick="OnClearClicked">Clear</MudButton>
        </ToolBarContent>
        <RowTemplate>
            <MudTd>@context.Title</MudTd>
            <MudTd Style="width: 10%">
                <MudIconButton Size="Size.Small"  Icon="@Icons.Filled.Remove" OnClick="(async () => await OnRemovedClicked(context))" Title="Remove" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>You have no documents queued.</MudText>
        </NoRecordsContent>
        <LoadingContent>
                <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Height="200px" />
        </LoadingContent>
    </MudTable>
</MudPaper>

@code {
    [Parameter] public EventCallback<DocumentCartEvent> OnRemoved { get; set; }

    [Parameter] public IList<DocumentCartItem>? Items 
    { 
        get 
        { 
            return _items; 
        } 
        set 
        { 
            _items = value;
            _isLoading = false;
            StateHasChanged(); 
        } 
    }

    //functional
    private IList<DocumentCartItem>? _items;

    //UI
    private bool _isLoading = true;


    private async Task OnRemovedClicked(DocumentCartItem documentCartItem)
    {
        if (Items != null) 
        {
            Items.Remove(documentCartItem);
            await OnRemoved.InvokeAsync(new DocumentCartEvent(CartAction.Delete, documentCartItem, Items));
        }
    }

    private async Task OnClearClicked()
    {
        _items.Clear();
        await OnRemoved.InvokeAsync(new DocumentCartEvent(CartAction.Clear, null, Items));
    }
}
