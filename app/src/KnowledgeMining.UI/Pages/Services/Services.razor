@page "/services/{IndexName}/{ServiceId?}"
@using KnowledgeMining.Application.Documents.Commands.UploadDocument
@using KnowledgeMining.Application.Documents.Queries.GetIndex
@using KnowledgeMining.Domain.Entities
@using KnowledgeMining.UI.Pages.Services.Components
@using KnowledgeMining.UI.Pages.Services.Models
@using KnowledgeMining.UI.Services.State
@using System.Text.Json
@using System.Text


@if(string.IsNullOrEmpty(ServiceId))
{
    <CartManager Items="@documentCartItems" OnRemoved="OnCartItemRemoved" />

    <ServiceSelection OnServiceEvent="OnServiceEvent" />
}

@code {
    [Inject] public IMediator? Mediator { get; set; }
    [Inject] public DocumentCartService? CartService { get; set; }

    [Parameter] public string IndexName { get; set; }
    [Parameter] public string? ServiceId { get; set; }

    //functional
    private IndexItem _indexItem;
    private IList<DocumentCartItem>? documentCartItems;

    protected override async Task OnInitializedAsync()
    {
        var indexResponse = await Mediator.Send(new GetIndexQuery(IndexName));
        _indexItem = indexResponse.IndexItem;

        if(_indexItem == null)
        {
            throw new ArgumentNullException(nameof(IndexName));
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            OnInitalizeUI().ConfigureAwait(false);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnCartItemRemoved(DocumentCartEvent documentCartEvent)
    {
        if(CartService != null && documentCartEvent.Action == CartAction.Delete)
            await CartService.Remove(IndexName, documentCartEvent.Item.RecordId ?? string.Empty);
    }

    private async Task OnInitalizeUI()
    {
        if(CartService != null) 
        {
            documentCartItems = await CartService.GetAll(IndexName);
        }
        else
        {
            documentCartItems = new List<DocumentCartItem>();
        }
        StateHasChanged();
    }

    private async Task OnServiceEvent(ServiceEvent serviceEvent) 
    {
        if (serviceEvent == null)
            return;

        switch(serviceEvent.Service)
        {
            case ServiceType.AbstractiveSummary:
            case ServiceType.ExtractiveSummary:
                await HandleSummaryService(serviceEvent);
                break;
        }
    }

    private async Task HandleSummaryService(ServiceEvent serviceEvent)
    {
        if (serviceEvent.Service == ServiceType.AbstractiveSummary)
            throw new NotImplementedException(nameof(ServiceType.AbstractiveSummary));


        if (serviceEvent.Action == ServiceAction.Start)
        {
            var serviceRequest = new DocumentServiceRequest
                {
                    Action = serviceEvent.Service.ToString(),
                    Id = Guid.NewGuid().ToString("D"),
                    IndexConfig = IndexName,
                    Documents = documentCartItems ?? Enumerable.Empty<DocumentCartItem>()
                };

            var payload = JsonSerializer.Serialize(serviceRequest);
            using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(payload)))
            {
                var document = new Document
                    {
                        Content = stream,
                        ContentType = "application/json",
                        LeaveOpen = false,
                        Name = $"{serviceRequest.Id}.json"
                    };
                await Mediator.Send(new UploadDocumentCommand("jobs", new Document[] { document }));
            }
        }
    }

}
