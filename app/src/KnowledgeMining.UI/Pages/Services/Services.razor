@page "/services/{Index}/{ServiceId?}"
@using KnowledgeMining.Application.Documents.Commands.SendMessageToQueue
@using KnowledgeMining.Application.Documents.Commands.UploadDocument
@using KnowledgeMining.Application.Documents.Queries.GetIndex
@using KnowledgeMining.Application.Documents.Queries.Jobs
@using KnowledgeMining.Domain.Entities
@using KnowledgeMining.Domain.Entities.Jobs
@using KnowledgeMining.UI.Pages.Services.Components
@using KnowledgeMining.UI.Pages.Services.Models
@using KnowledgeMining.UI.Services.State
@using System.Text.Json
@using System.Text


@if(string.IsNullOrEmpty(ServiceId))
{
    <CartManager Items="@documentCartItems" OnRemoved="OnCartItemRemoved" />

    <MudContainer Fixed="true">
        <MudIcon Icon="@Icons.Filled.KeyboardArrowDown" Color="Color.Tertiary" Size="Size.Large" 
            Style="margin-left: auto; margin-right: auto; display: block" />
    </MudContainer>

    <ServiceSelection OnServiceEvent="OnServiceEvent" />

    <MudContainer Fixed="true">
        <MudIcon Icon="@Icons.Filled.KeyboardDoubleArrowDown" Color="Color.Tertiary" Size="Size.Large"
            Style="margin-left: auto; margin-right: auto; display: block" />
    </MudContainer>

    <Jobs Items="documentJobs" IndexName="@Index" OnRefresh="@InitializeJobs" />
}

@code {
    [Inject] public IMediator? Mediator { get; set; }
    [Inject] public DocumentCartService? CartService { get; set; }
    [Inject] public AuthenticationStateProvider? AuthenticationState { get; set; }

    [Parameter] public string Index { get; set; }
    [Parameter] public string? ServiceId { get; set; }

    //functional
    private IndexItem _indexItem;
    private IList<DocumentCartItem>? documentCartItems;
    private IEnumerable<DocumentRequest>? documentJobs;

    protected override async Task OnInitializedAsync()
    {
        var indexResponse = await Mediator.Send(new GetIndexQuery(Index));
        _indexItem = indexResponse.IndexItem;

        if(_indexItem == null)
        {
            throw new ArgumentNullException(nameof(Index));
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            InitializeCart().ConfigureAwait(false);
            InitializeJobs().ConfigureAwait(false);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    #region Jobs

    private async Task InitializeJobs()
    {
        if(Mediator != null) 
        {
            documentJobs = await Mediator.Send(new GetDocumentJobsQuery(Index));
        }
        else
        {
            documentJobs = Enumerable.Empty<DocumentRequest>();
        }
        StateHasChanged();
    }

    #endregion

    #region Cart 

    private async Task InitializeCart()
    {
        if(CartService != null) 
        {
            documentCartItems = await CartService.GetAll(Index);
        }
        else
        {
            documentCartItems = new List<DocumentCartItem>();
        }
        StateHasChanged();
    }

    private async Task OnCartItemRemoved(DocumentCartEvent documentCartEvent)
    {
        if(CartService != null)
        {
            if (documentCartEvent.Action == CartAction.Delete)
            {
                await CartService.Remove(Index, documentCartEvent.Item.RecordId ?? string.Empty);
            }
            else if(documentCartEvent.Action == CartAction.Clear)
            {
                await CartService.Clear(Index);
            }
        }
    }

    #endregion

    private async Task OnServiceEvent(ServiceEvent serviceEvent) 
    {
        if (serviceEvent == null)
            return;

        switch(serviceEvent.Service)
        {
            case ServiceType.AbstractiveSummary:
            case ServiceType.ExtractiveSummary:
                await HandleSummaryService(serviceEvent);
                break;
        }
    }

    private async Task HandleSummaryService(ServiceEvent serviceEvent)
    {
        if (serviceEvent.Service == ServiceType.AbstractiveSummary)
            throw new NotImplementedException(nameof(ServiceType.AbstractiveSummary));

        var authState = await AuthenticationState.GetAuthenticationStateAsync();

        if (serviceEvent.Action == ServiceAction.Start)
        {
            var serviceRequest = new DocumentRequest
                {
                    Action = serviceEvent.Service.ToString(),
                    Id = Guid.NewGuid().ToString("D"),
                    IndexConfig = Index,
                    State = ServiceState.Pending.ToString(),
                    CreatedOn = DateTimeOffset.Now.Ticks,
                    Documents = documentCartItems?.Select(x => new DocumentItem
                    {
                      Id = x.RecordId,
                      Title = x.Title
                    }) ?? Enumerable.Empty<DocumentItem>(),
                    CreatedBy = authState.User.Identity.Name
                };

            var response = await Mediator.Send(new NewDocumentRequestCommand(new Domain.Entities.Messages.DocumentRequestMessage
            {
                DocumentRequest = serviceRequest,
                expirationTime = DateTime.UtcNow.AddDays(12)
            }));

            if(response.messageId != null)
            {
                documentJobs = null;
                _ = InitializeJobs().ConfigureAwait(false);
            }
        }
    }

}
