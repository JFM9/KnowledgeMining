@page "/services/{Index}"
@using KnowledgeMining.Application.Documents.Commands.DocumentRequest
@using KnowledgeMining.Application.Documents.Commands.UploadDocument
@using KnowledgeMining.Application.Documents.Queries.GetIndex
@using KnowledgeMining.Application.Documents.Queries.Jobs
@using KnowledgeMining.Domain.Entities
@using KnowledgeMining.Domain.Entities.Jobs
@using KnowledgeMining.Domain.Enums
@using KnowledgeMining.UI.Pages.Services.Components
@using KnowledgeMining.UI.Pages.Services.Models
@using KnowledgeMining.UI.Services.State
@using System.Text.Json
@using System.Text

<style>
    .review-component {
        border: 1px dashed #ddd;
        padding: 12px 8px;
        margin-bottom: 12px;
    }
</style>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if(_currentState == FirstState)
    {
        <MudText Typo="ServiceHeaderType">Cart</MudText>
        <MudText Typo="Typo.body1">Manage documents queued for services.</MudText>
        <hr />
        <CartManager Items="@documentCartItems" IndexName="@Index" OnRemoved="OnCartItemRemoved" />
    }
    else if(_currentState == SelectState)
    {
        <MudText Typo="ServiceHeaderType">Services</MudText>
        <MudText Typo="Typo.body1">Select the services to be applied against your documents.</MudText>
        <hr />
        <ServiceCard Title="Extractive summarization"
            Description="Produces a summary by extracting salient sentences within the document."
            ImagePath="/images/extractive-text-summarization.jpg"
            @bind-Active="_extractiveComponentActive" />

        <ServiceCard Title="Abstractive summarization"
            Description="Generates a summary that may not use the same words as those in the document, but captures the main idea."
            ImagePath="/images/abstractive-text-summarization.jpg"
            @bind-Active="_abstractiveComponentActive" />

        <ServiceCard Title="Prompt?"
            Description="Provide our model a prompt to influences the subsequent output."
            ImagePath="/images/abstractive-text-summarization.jpg"
            @bind-Active="_promptComponentActive" />
    }
    else if(_currentState == ReviewState)
    {
        <MudText Typo="ServiceHeaderType">Review Service Options</MudText>
        <hr />
        @if(_extractiveComponentActive)
        {
            <div class="review-component">
                <MudText Typo="Typo.h6">Extractive Summarization</MudText>
                <MudNumericField @bind-Value="_extractiveSummaryMaxSentences" Label="Maximum sentence limit for summary." 
                    Variant="Variant.Text" Min="3" Max="20" />
            </div>
        }

        @if(_abstractiveComponentActive)
        {
            <div class="review-component">
                <MudText Typo="Typo.h6">Abstractive Summarization</MudText>
                <MudNumericField @bind-Value="_abstractiveSummaryMaxSentences" Label="Maximum sentence limit for summary." 
                    Variant="Variant.Text" Min="3" Max="20" />
                <MudSelect @bind-Value="_abstractiveSummaryCost" Label="How expensive do you want this?" 
                    AdornmentColor="Color.Primary">
                    <MudSelectItem Value="1" Disabled="true">$$$$</MudSelectItem>
                    <MudSelectItem Value="2" Disabled="true">$$$</MudSelectItem>
                    <MudSelectItem Value="3">$$</MudSelectItem>
                    <MudSelectItem Value="4">$</MudSelectItem>
                </MudSelect>
            </div>
        }

        @if(_promptComponentActive)
        {
            <div class="review-component">
                <MudText Typo="Typo.h6">Prompt?</MudText>
                <MudTextField @bind-Value="_promptValue" Label="Prompt Value" Variant="Variant.Text" />
                <MudSelect @bind-Value="_promptCost" Label="How expensive do you want this?" 
                    AdornmentColor="Color.Primary">
                    <MudSelectItem Value="1" Disabled="true">$$$$</MudSelectItem>
                    <MudSelectItem Value="2" Disabled="true">$$$</MudSelectItem>
                    <MudSelectItem Value="3">$$</MudSelectItem>
                    <MudSelectItem Value="4">$</MudSelectItem>
                </MudSelect>
            </div>
        }
    }
    else if(_currentState == LastState)
    {
        <MudText Typo="ServiceHeaderType">Job Request</MudText>
        <hr />

        @if(_createdJobs != null)
        {
            foreach(var job in _createdJobs)
            {
                if(job.Created && job.Request != null)
                {
                    <div class="review-component">
                        <MudText Typo="Typo.h6">@job.Request.Action.ToString()</MudText>
                        <MudField Label="Link" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Outlined.Link"> 
                            <MudLink Href="@($"/job/{Index}/{job.Request.Id}")">@job.Request.Id</MudLink>
                        </MudField>
                    </div>
                }
                else
                {
                    <div class="review-component">
                        <MudText Typo="Typo.h6">@job.Request?.Action.ToString()</MudText>
                        <MudField Label="Error" Variant="Variant.Text" Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Outlined.Error" AdornmentColor="Color.Error"> 
                            There was an issue generating this request.
                        </MudField>
                    </div>
                }
            }
        }
        else
        {
            <MudText Typo="Typo.h6">Generating requests...</MudText>
            <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Height="200px" />
        }
    }

    <MudPaper Elevation="0" Class="mt-10">
        <MudButton Disabled="@(_currentState > FirstState && _currentState < LastState ? false : true)" 
            Variant="Variant.Outlined"
            Class="mr-2" 
            OnClick="PreviousStep">Previous</MudButton>
        <MudButton Disabled="@(_currentState < LastState ? false : true)" 
            Variant="Variant.Outlined"
            OnClick="NextStep">@NextStepLabel()</MudButton>
    </MudPaper>

</MudContainer>


@code {
    [Inject] public ISnackbar? Snackbar { get; set; }
    [Inject] public IMediator? Mediator { get; set; }
    [Inject] public DocumentCartService? CartService { get; set; }
    [Inject] public AuthenticationStateProvider? AuthenticationState { get; set; }

    [Parameter] public string? Index { get; set; }

    //UI
    private const MudBlazor.Typo ServiceHeaderType = Typo.h4;

    //functional
    private IndexItem? _indexItem;
    private IList<DocumentCartItem>? documentCartItems;
    private IEnumerable<DocumentJobRequest>? documentJobs;

    //stateful
    private int _currentState = 1; // 1 = Manage Document, 2 = Pick Services, 3 = Services Result
    private const int LastState = 4;
    private const int FirstState = 1;
    private const int ReviewState = 3;
    private const int SelectState = 2;
    private ServiceDocumentJobRequestResponse[]? _createdJobs;


    //service values
    private bool _extractiveComponentActive = false;
    private int _extractiveSummaryMaxSentences = 3;

    private bool _abstractiveComponentActive = false;
    private int _abstractiveSummaryMaxSentences = 3;
    private int _abstractiveSummaryCost = 4;

    private bool _promptComponentActive = false;
    private string _promptValue = string.Empty;
    private int _promptCost = 4;

    protected override async Task OnInitializedAsync()
    {
        var indexResponse = await Mediator!.Send(new GetIndexQuery(Index!));
        _indexItem = indexResponse.IndexItem;

        if(_indexItem == null)
        {
            throw new ArgumentNullException(nameof(Index));
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            InitializeCart().ConfigureAwait(false);
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void PreviousStep()
    {
        _currentState--;
        if (_currentState < FirstState)
            _currentState = FirstState;

        StateHasChanged();
    }

    private void NextStep()
    {
        _currentState++;
        if (_currentState > LastState)
            _currentState = LastState;

        StateHasChanged();

        if (_currentState == LastState)
            LastStep().ConfigureAwait(true);
    }

    private string NextStepLabel()
    {
        switch(_currentState)
        {
            case FirstState: return "Next: Select Services";
            case SelectState: return "Next: Review Request";
            case ReviewState: return "Create Request";
            case LastState: return "Done";
        }

        return "Next";
    }

    private async Task LastStep()
    {
        await Task.Delay(2000);
        await CreateRequests();
        StateHasChanged();
    }

    #region Cart 

    private async Task InitializeCart()
    {
        if(CartService != null) 
        {
            documentCartItems = await CartService.GetAll(Index!);
        }
        else
        {
            documentCartItems = new List<DocumentCartItem>();
        }
        StateHasChanged();
    }

    private async Task OnCartItemRemoved(DocumentCartEvent documentCartEvent)
    {
        if(CartService != null)
        {
            if (documentCartEvent.Action == CartAction.Delete)
            {
                await CartService.Remove(Index!, documentCartEvent.Item.RecordId ?? string.Empty);
            }
            else if(documentCartEvent.Action == CartAction.Clear)
            {
                await CartService.Clear(Index!);
            }
        }
    }

    #endregion

    private async Task CreateRequests()
    {
        var createdJobs = new List<ServiceDocumentJobRequestResponse>();

        if (_extractiveComponentActive)
            createdJobs.Add(await CreateJobRequest(ServiceType.ExtractiveSummary, ExtractiveSummaryOptions()));

        if (_abstractiveComponentActive)
            createdJobs.Add(await CreateJobRequest(ServiceType.AbstractiveSummary, AbstractiveSummaryOptions()));

        if (_promptComponentActive)
            createdJobs.Add(await CreateJobRequest(ServiceType.Prompt, PromptOptions()));

        _createdJobs = createdJobs.ToArray();
    }

    private Dictionary<string, string> ExtractiveSummaryOptions()
    {
        var options = new Dictionary<string, string>();
        options["maxSentences"] = _extractiveSummaryMaxSentences.ToString();
        return options;
    }

    private Dictionary<string, string> AbstractiveSummaryOptions()
    {
        var options = new Dictionary<string, string>();
        options["maxSentences"] = _abstractiveSummaryMaxSentences.ToString();
        options["cost"] = _abstractiveSummaryCost.ToString();
        return options;
    }

    private Dictionary<string, string> PromptOptions()
    {
        var options = new Dictionary<string, string>();
        options["prompt"] = _promptValue;
        options["cost"] = _promptCost.ToString();
        return options;
    }

    private async Task<ServiceDocumentJobRequestResponse> CreateJobRequest(ServiceType serviceType, Dictionary<string, string> options)
    {
        var authState = await AuthenticationState!.GetAuthenticationStateAsync();

        var serviceRequest = new DocumentJobRequest
            {
                Action = serviceType,
                Id = Guid.NewGuid().ToString("D"),
                Index = _indexItem.IndexName,
                State = ServiceState.Pending.ToString(),
                CreatedOn = DateTimeOffset.Now.Ticks,
                Documents = documentCartItems?.Select(x => new DocumentItem
                {
                    Id = x.RecordId,
                    Title = x.Title
                }) ?? Enumerable.Empty<DocumentItem>(),
                CreatedBy = authState.User.Identity.Name,
                Options = options
            };

        var response = await Mediator!.Send(new NewDocumentRequestCommand(serviceRequest));
        return new ServiceDocumentJobRequestResponse(response.messageId != null, serviceRequest);
    }

    


}
