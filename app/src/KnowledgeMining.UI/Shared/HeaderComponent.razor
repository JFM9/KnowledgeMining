@using KnowledgeMining.Application.Documents.Queries.GetIndex
@using KnowledgeMining.Domain.Entities
@using MediatR

@inject NavigationManager NavigationManager;
@inject IMediator Mediator;


<MudAppBar Style="@($"color: {Theme.Palette.Black};background: {Theme.Palette.White}")" Elevation="1">
    <MudStack Spacing="4" Row="true">
        <MudImage Src="@_logoPath" Height="25" Elevation="0" onclick="@(() => NavigateToHomePage())" />
        <MudButton Variant="Variant.Text" Href="@($"/search/{IndexName}/")" Target="_self">Search</MudButton>
        @*<MudButton Variant="Variant.Text" OnClick="@NavigateToDocumentsPage">Documents</MudButton>*@
        @if(indexNavigationItems != null)
        {
            foreach(var nav in indexNavigationItems)
            {
                @if(nav.Key.Equals("<unknown>"))
                {
                    foreach(var link in nav.Value)
                    {
                        <MudButton 
                            Variant="Variant.Text" Href="@link.Url" Target="_self">@link.Name</MudButton>
                    }
                }
                else
                {    
                    <MudMenu AnchorOrigin="Origin.BottomLeft" 
                        FullWidth="true" Label="@nav.Key"  EndIcon="@Icons.Outlined.ArrowDropDown" 
                        ButtonType="ButtonType.Button" Variant="Variant.Text">
                        @foreach(var link in nav.Value)
                        {
                            <MudButton Variant="Variant.Text" Href="@link.Url" Target="_self">@link.Name</MudButton>
                        }
                    </MudMenu>
                }
                
            }
        }
        
    </MudStack>
</MudAppBar>

@code {
    [CascadingParameter]
    public RouteData? RouteData { get; set; }

    private Dictionary<string, List<IndexNavigationItem>>? indexNavigationItems;
    private string? IndexName { get; set; }
    private MudTheme Theme = new MudTheme();
    private string? _logoPath = "images/gac-logo-en.svg";

    protected override async Task OnInitializedAsync()
    {
        if(RouteData?.RouteValues.ContainsKey("Index") ?? false)
        {
            IndexName = RouteData?.RouteValues["Index"]?.ToString();

            var response = await Mediator.Send(new GetIndexQuery(IndexName));
            indexNavigationItems = response.IndexItem.NavigationItems?
                .GroupBy(x => x.Group ?? "<unknown>")
                .OrderBy(x => x.Key)
                .ToDictionary(x => x.Key, x => x.ToList());

            if (!string.IsNullOrEmpty(response.IndexItem.Logo) &&
                Uri.TryCreate(response.IndexItem.Logo, UriKind.Absolute, out _))
                _logoPath = response.IndexItem.Logo;
        }

        await base.OnInitializedAsync();
    }

    private void NavigateToHomePage()
    {
        NavigationManager.NavigateTo($"/{IndexName}");
    }

    private void NavigateToSearchPage()
    {
        NavigationManager.NavigateTo($"/search/{IndexName}/");
    }

    private void NavigateToDocumentsPage()
    {
        NavigationManager.NavigateTo($"/documents/{IndexName}/");
    }
}